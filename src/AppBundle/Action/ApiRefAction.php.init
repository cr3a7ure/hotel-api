<?php

// src/AppBundle/Action/ApiRefAction.php

namespace AppBundle\Action;

use Symfony\Component\Serializer\Annotation\Groups;
use AppBundle\Entity\ApiRef;
use Doctrine\Common\Persistence\ManagerRegistry;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;
use Symfony\Component\Routing\Annotation\Route;
use Unirest;

use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Serializer\Serializer;
use Symfony\Component\Serializer\Encoder\XmlEncoder;
use Symfony\Component\Serializer\Encoder\JsonEncoder;
use Symfony\Component\Serializer\Normalizer\ObjectNormalizer;


class ApiRefAction
{
    // private $myService;

    // public function __construct(MyService $myService)
    // {
    //     $this->myService = $myService;
    // }
// curl http://localhost:8090/test1/query -X POST --data 'query=prefix+hydra%3A+%3Chttp%3A%2F%2Fwww.w3.org%2Fns%2Fhydra%2Fcore%23%3E%0A%0Adescribe+%3Fsubject%0AFROM+%3Chttp%3A%2F%2Flocalhost%3A8090%2Ftest1%2Fdata%2Ftest1%3E%0AWHERE+%7B%0A++%3Fsubject+hydra%3AsupportedProperty+%3Fobject%0A%7D%0ALIMIT+25' -H 'Accept: application/ld+json'
    /**
     * @Route(
     *     name="api_ref_action",
     *     path="/api_ref/special",
     *     defaults={"_api_resource_class"=ApiRef::class, "_api_collection_operation_name"="special"}
     * )
     * @Method("PUT")
     */
    // public function __invoke($data) // API Platform retrieves the PHP entity using the data provider then (for POST and
    public function __invoke($data) // API Platform retrieves the PHP entity using the data provider then (for POST and
                                    // PUT method) deserializes user data in it. Then passes it to the action. Here $data
                                    // is an instance of Book having the given ID. By convention, the action's parameter
                                    // must be called $data.
    {
        // $this->myService->doSomething($data);
        // $data = $request->getContent();
        $encoders = array(new XmlEncoder(), new JsonEncoder());
        $normalizers = array(new ObjectNormalizer());
        $serializer = new Serializer($normalizers, $encoders);

        //SPARQL endpoint
        $headersJSONLD = array('Accept' => 'application/ld+json');
        $sparqlEndpoint = "http://localhost:8090/test1/query";
        $dataset = "/test1/query";
        $sparqlQuery = "query=prefix+hydra%3A+%3Chttp%3A%2F%2Fwww.w3.org%2Fns%2Fhydra%2Fcore%23%3E%0A%0Adescribe+%3Fsubject%0AFROM+%3Chttp%3A%2F%2Flocalhost%3A8090%2Ftest1%2Fdata%2Ftest1%3E%0AWHERE+%7B%0A++%3Fsubject+hydra%3AsupportedProperty+%3Fobject%0A%7D%0ALIMIT+1";
        $sparqlResponse = Unirest\Request::post($sparqlEndpoint,$headersJSONLD,$sparqlQuery);


        //Other test call
        $headers = array('Accept' => 'application/json');
        $gmapsApiKey = 'AIzaSyDzVG8kyjhNB-y8wpRk_6KCl-DtQFPsTQw';
        $query = array();
        $query['key'] = $gmapsApiKey;
        $query['latlng'] = '37.4224764'.",". '-122.0842499';
        $response = Unirest\Request::get('https://maps.googleapis.com/maps/api/geocode/json',$headers,$query);
        $responseResults = $response->body->results;
        $test = new ApiRef();
        $test->setArticleBody("dasdasdasd");
        $jsonContent = $serializer->serialize($sparqlResponse, 'json');
        return new Response($jsonContent); // API Platform will automatically validate, persist (if you use Doctrine) and serialize an entity
                      // for you. If you prefer to do it yourself, return an instance of Symfony\Component\HttpFoundation\Response
    }
}